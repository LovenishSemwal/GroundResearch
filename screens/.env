import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  TextInput,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  Alert,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';

const LineandVillage = ({ navigation }) => {
  const logs = useRef([]);

  const [researcherMobile, setResearcherMobile] = useState('');
  const [researcherName, setResearcherName] = useState('');

  const [selectedState, setSelectedState] = useState('');
  const [selectedDistrict, setSelectedDistrict] = useState('');
  const [selectedVillage, setSelectedVillage] = useState('');
  const [shapeId, setShapeId] = useState('');
  const [selectedLine, setSelectedLine] = useState('');

  const [statesList, setStatesList] = useState([]);
  const [districtsList, setDistrictsList] = useState([]);
  const [villagesList, setVillagesList] = useState([]);
  const [lineList, setLineList] = useState([]);

  const [dropdownVillagesVisible, setDropdownVillagesVisible] = useState(false);
  const [dropdownLinesVisible, setDropdownLinesVisible] = useState(false);

  const villageRef = useRef(null);
  const [surveyedVillageData, setSurveyedVillageData] = useState(null);

  // --- Load researcher data ---
  useEffect(() => {
    const loadResearcherData = async () => {
      try {
        const storedData = await AsyncStorage.getItem('researcherData');
        if (storedData) {
          const parsedData = JSON.parse(storedData);
          setResearcherName(parsedData.researcher_Name || '');
          setResearcherMobile(parsedData.researcher_Mobile || '');
        }
      } catch (err) {
        console.error('Failed to load researcher data:', err);
      }
    };
    loadResearcherData();
  }, []);

  // --- Load states and lines once researcher is loaded ---
  useEffect(() => {
    if (researcherMobile) {
      fetchStates();
      fetchLines();
    }
  }, [researcherMobile]);

  // --- Fetch surveyed data & shapeId if both are selected ---
  useEffect(() => {
    if (selectedLine && selectedVillage && researcherMobile) {
      fetchShapeId();
      fetchSurveyedVillageData();
    }
  }, [selectedLine, selectedVillage, researcherMobile]);

  const fetchStates = async () => {
    try {
      const res = await axios.get('https://adfirst.in/api/VillageCsv/UniqueStates');
      const states = res.data.data || [];
      setStatesList(states);
      const firstState = states[0] || '';
      setSelectedState(firstState);
      if (firstState) fetchDistricts(firstState);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchDistricts = async (state) => {
    try {
      const res = await axios.get('https://adfirst.in/api/VillageCsv/FilteredUniqueDists', {
        params: { state, researcherMobile },
      });
      const districts = res.data.data || [];
      setDistrictsList(districts);
      setSelectedDistrict(districts[0] || '');
    } catch (error) {
      console.error(error);
    }
  };

  const fetchLines = async () => {
    try {
      const res = await axios.post('https://adfirst.in/api/VillageCsv/GetDistinctLineByResearcher', {
        Researcher_Mobile: researcherMobile,
      });
      setLineList(res.data || []);
    } catch (error) {
      console.error('Error fetching lines:', error.response?.data || error.message);
    }
  };

  // NEW: Fetch villages by selected line
  const fetchVillagesByLine = async (line) => {
    try {
      const res = await axios.post('https://adfirst.in/api/VillageCsv/GetVillageAndShapeByLine', {
        LINE: line,
        Researcher_Mobile: researcherMobile,
      });
      const dataArray = res.data || [];
      setVillagesList(dataArray.map(v => v.villagE_NAME));
    } catch (error) {
      console.error('Error fetching villages by line:', error.message);
    }
  };

  const fetchShapeId = async () => {
    try {
      const res = await axios.post('https://adfirst.in/api/VillageCsv/GetVillageAndShapeByLine', {
        LINE: selectedLine,
        Researcher_Mobile: researcherMobile,
      });

      const normalize = (str) => (str || '').trim().toLowerCase();
      const match = (res.data || []).find(item =>
        normalize(item?.villagE_NAME) === normalize(selectedVillage)
      );

      if (match && match.shapE_ID) {
        setShapeId(match.shapE_ID);
        return match.shapE_ID;
      } else {
        // Alert.alert('Mismatch', 'Village not matched or shapE_ID missing.');
        return null;
      }
    } catch (error) {
      console.error('Error fetching SHAPE_ID:', error.message);
      return null;
    }
  };

  const fetchSurveyedVillageData = async () => {
    try {
      const res = await axios.post('https://adfirst.in/api/VillageCsv/GetSurveyedVillagesFull', {
        Line: selectedLine,
        Researcher_Mobile: researcherMobile,
        Village: selectedVillage,
      });
      setSurveyedVillageData(res.data);
    } catch (error) {
      console.error('Error fetching surveyed village data:', error.message);
    }
  };

  //
  const handleLineSelect = (line) => {
    setSelectedLine(line);
    setSelectedVillage('');
    setShapeId('');
    setDropdownLinesVisible(false);
    fetchVillagesByLine(line);
  };

  const handleVillageSelect = (village) => {
    setSelectedVillage(village);
    setDropdownVillagesVisible(false);
  };

  const handleSubmit = async () => {
    if (!selectedLine || !selectedVillage) {
      Alert.alert('Validation Error', 'Please select both line and village.');
      return;
    }

    const id = await fetchShapeId();

    if (!id) {
      Alert.alert('Error', 'Unable to fetch SHAPE_ID. Please check your selection.');
      return;
    }

    navigation.navigate('Select', {
      selectedState,
      selectedDistrict,
      selectedVillage,
      selectedLine,
      shapeId: id,
      researcherMobile,
    });
  };

  const renderDropdown = (visible, list, onSelect) => {
    if (!visible) return null;
    return (
      <View style={styles.dropdownWrapper}>
        <ScrollView style={styles.dropdownScroll} nestedScrollEnabled>
          {list.map((item, index) => (
            <TouchableOpacity key={index} style={styles.dropdownItem} onPress={() => onSelect(item)}>
              <Text style={styles.dropdownItemText}>{item}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>
    );
  };

  return (
    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <ScrollView contentContainerStyle={styles.container} keyboardShouldPersistTaps="handled">
        <Text style={styles.heading}>Welcome</Text>
        <Text style={styles.headingname}>{researcherName}</Text>

        <Text style={styles.label}>Select Line</Text>
        <TouchableOpacity
          style={styles.input}
          onPress={() => {
            setDropdownLinesVisible(!dropdownLinesVisible);
            setDropdownVillagesVisible(false);
          }}
        >
          <Text style={{ color: selectedLine ? '#000' : 'gray' }}>
            {selectedLine || 'Select a line...'}
          </Text>
        </TouchableOpacity>
        {renderDropdown(dropdownLinesVisible, lineList, handleLineSelect)}

        <Text style={styles.label}>Select Village</Text>
        <TouchableOpacity
          ref={villageRef}
          style={styles.input}
          onPress={() => {
            setDropdownVillagesVisible(!dropdownVillagesVisible);
            setDropdownLinesVisible(false);
          }}
        >
          <Text style={{ color: selectedVillage ? '#000' : 'gray' }}>
            {selectedVillage || 'Select a village...'}
          </Text>
        </TouchableOpacity>
        {renderDropdown(dropdownVillagesVisible, villagesList, handleVillageSelect)}

        <Text style={styles.label}>Researcher Mobile</Text>
        <TextInput
          style={styles.input}
          placeholder="Researcher Mobile"
          placeholderTextColor="gray"
          value={researcherMobile}
          editable={false}
        />

        <TouchableOpacity style={styles.button} onPress={handleSubmit}>
          <Text style={styles.buttonText}>Next</Text>
        </TouchableOpacity>

        {surveyedVillageData && (
          <View style={{ marginTop: 20 }}>
            <Text style={{ fontWeight: 'bold', fontSize: 16, marginBottom: 10 }}>
              Surveyed Villages Info:
            </Text>
            {Array.isArray(surveyedVillageData) ? (
              surveyedVillageData.map((item, index) => (
                <View
                  key={index}
                  style={{
                    marginBottom: 15,
                    padding: 15,
                    backgroundColor: '#f0f8ff',
                    borderRadius: 10,
                    borderLeftWidth: 6,
                    borderLeftColor: '#007BFF',
                  }}
                >
                  <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 8 }}>
                    #{index + 1}
                  </Text>
                  <Text style={{ fontSize: 16, marginBottom: 6 }}>
                    <Text style={{ fontWeight: 'bold' }}>Village:</Text> {item.village_Name} &nbsp;&nbsp;
                    <Text style={{ fontWeight: 'bold' }}>Status:</Text> {item.hasPart2 ? 'Done' : 'Pending'}
                  </Text>
                  <Text style={{ fontSize: 16 }}>
                    <Text style={{ fontWeight: 'bold' }}>Line:</Text> {item.kml_Name} &nbsp;&nbsp;
                    <Text style={{ fontWeight: 'bold' }}>Status:</Text> {item.hasPart1 ? 'Done' : 'Pending'}
                  </Text>
                </View>
              ))
            ) : (
              <Text>No data found.</Text>
            )}
          </View>
        )}
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

export default LineandVillage;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    flexGrow: 1,
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#333',
  },
  headingname: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 40,
    color: '#333',
  },
  label: {
    fontSize: 16,
    marginBottom: 6,
    color: '#444',
    fontWeight: 'bold',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 12,
    borderRadius: 6,
    marginBottom: 20,
    fontSize: 16,
    color: '#000',
  },
  button: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  dropdownWrapper: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 6,
    backgroundColor: '#fff',
    maxHeight: 200,
    marginBottom: 20,
  },
  dropdownScroll: {
    maxHeight: 200,
  },
  dropdownItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  dropdownItemText: {
    fontSize: 16,
    color: '#000',
  },
});
