part2question7------
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import axios from 'axios';

const PartTwoQues7 = ({ navigation, route }) => {
  const { name, researcherMobile, formNumber, selectedState, selectedDistrict, selectedVillage, shapeId } = route.params || {};

  const [problemMakers, setProblemMakers] = useState([
    { id: null, name: '', background: '', mobile: '', reason: '' } // id added
  ]);
  const [loading, setLoading] = useState(false);

  const addMore = () => {
    setProblemMakers([
      ...problemMakers,
      { id: null, name: '', background: '', mobile: '', reason: '' }
    ]);
  };

  const handleChange = (index, field, value) => {
    const updated = [...problemMakers];
    updated[index][field] = value;
    setProblemMakers(updated);
  };

  const isNextEnabled = problemMakers.every(
    (item) =>
      item.name.trim() !== '' &&
      item.background.trim() !== '' &&
      item.mobile.trim() !== '' &&
      item.reason.trim() !== ''
  );

  const handleNext = async () => {
  if (!isNextEnabled) {
    Alert.alert('Please fill in all fields for each entry.');
    return;
  }

  setLoading(true);

  try {
    for (const entry of problemMakers) {
      const payload = {
        // Id: entry.id, // For update
        question: 'Who can create problems in land acquisition?',
        answer: null,
        name: entry.name,
        background: entry.background,
        mobile_No: Number(entry.mobile),
        reason: entry.reason,
        kml_Name: name,
        researcher_Mobile: Number(researcherMobile),
        form_No: formNumber,
        state: selectedState,
        dist: selectedDistrict,
        village_Name: selectedVillage,
        shape_Id: shapeId
      };

      let response;

      if (1) {
        // Update existing entry
        response = await axios.post(
          `https://adfirst.in/api/Part2Question7/update/${Number(68)}`,
          payload,
          
        );
        console.log('Updated entry:', response.data);
      } else {
        // Create new entry
        response = await axios.post(
          'https://adfirst.in/api/Part2Question7',
          payload,
          
        );
        console.log('New entry submitted:', response.data);

        // Save returned id for future updates
        if (response.data && response.data.id) {
          entry.id = response.data.id;
        }
      }
    }

    Alert.alert('All entries saved successfully!');
    navigation.navigate('PartOneQues12', {
      name,
      researcherMobile,
      formNumber,
      shapeId,
      selectedVillage,
      selectedDistrict,
      selectedState
    });
  } catch (error) {
    console.error('Error submitting entries:', error.response?.data || error.message);
    Alert.alert('Error submitting entries. Check console for details.');
  } finally {
    setLoading(false);
  }
};

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
    >
      <ScrollView
        contentContainerStyle={styles.container}
        keyboardShouldPersistTaps="handled"
      >
        <Text style={styles.question}>Question</Text>
        <Text style={styles.question}>Who can create problems in land acquisition?</Text>
        <Text style={styles.question}>(कौन जमीन अधिग्रहण में समस्या खड़ी कर सकता है?)</Text>

        {problemMakers.map((item, index) => (
          <View key={index} style={styles.formSet}>
            <TextInput
              style={styles.input}
              placeholder="Name"
              placeholderTextColor="gray"
              value={item.name}
              onChangeText={(text) => handleChange(index, 'name', text)}
            />
            <TextInput
              style={styles.input}
              placeholder="Background and work"
              placeholderTextColor="gray"
              value={item.background}
              onChangeText={(text) => handleChange(index, 'background', text)}
            />
            <TextInput
              style={styles.input}
              placeholder="Mobile"
              placeholderTextColor="gray"
              keyboardType="phone-pad"
              value={item.mobile}
              onChangeText={(text) => handleChange(index, 'mobile', text)}
            />
            <TextInput
              style={[styles.input, styles.textArea]}
              placeholder="Reason"
              placeholderTextColor="gray"
              multiline
              numberOfLines={4}
              value={item.reason}
              onChangeText={(text) => handleChange(index, 'reason', text)}
            />
          </View>
        ))}

        <TouchableOpacity
          style={styles.addMoreButton}
          onPress={addMore}
        >
          <Text style={styles.addMoreText}>Add More</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.nextButton, { opacity: isNextEnabled && !loading ? 1 : 0.5 }]}
          onPress={handleNext}
          disabled={!isNextEnabled || loading}
        >
          <Text style={styles.nextButtonText}>{loading ? 'Wait...' : 'Submit & Next'}</Text>
        </TouchableOpacity>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

export default PartTwoQues7;

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 24,
    backgroundColor: '#fff',
  },
  question: {
    fontSize: 20,
    fontWeight: '600',
    marginBottom: 16,
    textAlign: 'center',
  },
  formSet: {
    borderWidth: 1,
    borderColor: '#aaa',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
  },
  input: {
    borderBottomWidth: 1,
    borderColor: '#aaa',
    marginBottom: 12,
    paddingVertical: 6,
    paddingHorizontal: 8,
    fontSize: 16,
  },
  textArea: {
    minHeight: 80, // Adjust as needed
    textAlignVertical: 'top',
  },
  addMoreButton: {
    backgroundColor: '#007bff',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 12,
  },
  addMoreText: {
    color: '#fff',
    fontSize: 16,
  },
  nextButton: {
    backgroundColor: '#28a745',
    paddingVertical: 14,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 24,
  },
  nextButtonText: {
    color: '#fff',
    fontSize: 18,
  },
});




import React, { createContext, useState, useContext } from 'react';

// Create context
const FormDataContext = createContext();

// Provider component
export const FormDataProvider = ({ children }) => {
  // Initialize formData with default structure (could be empty, or with page keys like part1question1)
  const [formData, setFormData] = useState({
    part1question1: {
      answer: null,
      id: null,
    },
  });

  /**
   * Updates a specific page's data
   * @param {string} key - Page key (e.g., 'part1question1')
   * @param {object} newData - Partial updates (e.g., { answer: 'a', id: 5 })
   */
  const updateFormData = (key, newData) => {
    setFormData(prev => ({
      ...prev,
      [key]: {
        ...(prev[key] || {}), // Initialize if key didn’t exist
        ...newData,
      },
    }));
  };

  /**
   * Resets all form data (useful for starting fresh)
   */
  const resetFormData = () => {
    setFormData({
      part1question1: {
        answer: null,
        id: null,
      },
      // You could reset other pages here too if needed
    });
  };

  return (
    <FormDataContext.Provider
      value={{ formData, updateFormData, resetFormData }}
    >
      {children}
    </FormDataContext.Provider>
  );
};

// Hook for easy usage
export const useFormData = () => useContext(FormDataContext);







part2question1-----------

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, ScrollView, StyleSheet, Alert } from 'react-native';
import axios from 'axios';
import { useFormData } from './FormDataContext'; // import the context

const PartTwoQues1 = ({ navigation, route }) => {
  const { name, researcherMobile, formNumber } = route.params || {};
  const { formData: contextData, updateFormData } = useFormData();

  // Initialize formData with context data if available or default values
  const [formData, setFormData] = useState({
    id: contextData.PartTwoQues1?.id || 0,
    question: 'Information about the village',
    villageName: '',
    panchayat: '',
    block: '',
    district: '',
    population: '',
    totalLand: '',
    majorCrops: '',
    politicalInclination: '',
    fiveMostInfluentialFamilies: '',
    internalDisputeInVillage: '',
    internalDisputeInVillageDetails: '',
    influentialCommunitiesAndCastes: '',
    ResearcherMobile: Number(researcherMobile),
    KmlName: name,
    FormNo: formNumber,
    ...contextData.PartTwoQues1 // load saved data if any
  });

  const [loading, setLoading] = useState(false);

  useEffect(() => {
    updateFormData('PartTwoQues1', formData);
  }, [formData]);

  const questions = [
    { key: 'villageName', label: 'Name of the village (गांव का नाम)' },
    { key: 'panchayat', label: 'Panchayat (पंचायत)' },
    { key: 'block', label: 'Block (ब्लॉक)' },
    { key: 'district', label: 'District (जिला)' },
    { key: 'population', label: 'Population (जनसंख्या)' },
    { key: 'totalLand', label: 'Total land (कुल जमीन)' },
    { key: 'majorCrops', label: 'Major crops (मुख्य फसलें)' },
    { key: 'politicalInclination', label: 'Political inclination (राजनीतिक झुकाव)' },
  ];

  const handleChange = (field, value) => {
  if (field === 'internalDisputeInVillage' && value === 'No') {
    // Clear details field if dispute is 'No'
    setFormData(prev => ({
      ...prev,
      [field]: value,
      internalDisputeInVillageDetails: ''  // clear details!
    }));
  } else {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  }
};

  const handleNext = async () => {
    setLoading(true);

    // Validate required fields
    for (const field of [
      'villageName',
      'panchayat',
      'block',
      'district',
      'population',
      'totalLand',
      'majorCrops',
      'politicalInclination',
      'fiveMostInfluentialFamilies',
      'internalDisputeInVillage',
      'influentialCommunitiesAndCastes'
    ]) {
      if (!formData[field]) {
        Alert.alert('Please fill in all the fields.');
        setLoading(false);
        return;
      }
    }

    if (formData.internalDisputeInVillage === 'Yes' && !formData.internalDisputeInVillageDetails) {
      Alert.alert('Please provide details for the internal dispute.');
      setLoading(false);
      return;
    }

    try {
      // The same POST API is used for both create (id=0) and update (id!=0)
      const response = await axios.post('https://adfirst.in/api/TblPart2Question1', formData);
      if (response.data.success) {
        Alert.alert('Data saved successfully!');
        // If it's a new record, backend will assign an id; let's update our local data context
        if (formData.id === 0 && response.data.id) {
          setFormData(prev => ({ ...prev, id: response.data.id }));
        }
        navigation.navigate('PartTwoQues2', { name, researcherMobile, formNumber });
      } else {
        Alert.alert('Failed to save data.');
      }
    } catch (error) {
      console.error(error);
      Alert.alert('Error saving data:', error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.mainQuestion}>Part2: Question 1</Text>
      <Text style={styles.mainQuestion}>Information about the Village</Text>
      <Text style={styles.mainQuestion}>(गांव के बारे में जानकारी)</Text>

      {questions.map((q) => (
        <View key={q.key} style={styles.inputGroup}>
          <Text style={styles.label}>{q.label}</Text>
          <TextInput
            style={styles.textInput}
            placeholder={`Answer for: ${q.label}`}
            value={formData[q.key]}
            onChangeText={(text) => handleChange(q.key, text)}
          />
        </View>
      ))}

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Five most influential families in the panchayat</Text>
        <Text style={styles.label}>(पंचायत के 5 सबसे प्रभावशाली परिवार)</Text>
        <TextInput
          style={styles.textArea}
          multiline
          numberOfLines={4}
          placeholder="Answer for Question 9"
          value={formData.fiveMostInfluentialFamilies}
          onChangeText={(text) => handleChange('fiveMostInfluentialFamilies', text)}
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Has there been any internal dispute in the village?</Text>
        <Text style={styles.label}>(क्या गांव में किसी बात पर आपसी झगड़ा हुआ है?)</Text>
        <View style={styles.optionContainer}>
          <TouchableOpacity
            style={[
              styles.optionButton,
              formData.internalDisputeInVillage === 'Yes' && styles.optionButtonSelected
            ]}
            onPress={() => handleChange('internalDisputeInVillage', 'Yes')}
          >
            <Text style={styles.optionText}>Yes (हाँ)</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.optionButton,
              formData.internalDisputeInVillage === 'No' && styles.optionButtonSelected
            ]}
            onPress={() => handleChange('internalDisputeInVillage', 'No')}
          >
            <Text style={styles.optionText}>No (नहीं)</Text>
          </TouchableOpacity>
        </View>

        {formData.internalDisputeInVillage === 'Yes' && (
          <TextInput
            style={styles.textArea}
            multiline
            numberOfLines={4}
            placeholder="Please explain..."
            value={formData.internalDisputeInVillageDetails}
            onChangeText={(text) => handleChange('internalDisputeInVillageDetails', text)}
          />
        )}
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Influential communities and castes</Text>
        <Text style={styles.label}>(प्रभावशाली समाज और जातियां)</Text>
        <TextInput
          style={styles.textArea}
          multiline
          numberOfLines={4}
          placeholder="Answer for Question 11"
          value={formData.influentialCommunitiesAndCastes}
          onChangeText={(text) => handleChange('influentialCommunitiesAndCastes', text)}
        />
      </View>

      <TouchableOpacity
        style={styles.submitButton}
        onPress={handleNext}
        disabled={loading}
      >
        <Text style={styles.submitButtonText}>{loading ? 'Submitting...' : 'Next Page'}</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

export default PartTwoQues1;


const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    paddingBottom: 40,
  },
  mainQuestion: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontWeight: '600',
    marginBottom: 6,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 12,
    borderRadius: 6,
    fontSize: 16,
  },
  textArea: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 12,
    borderRadius: 6,
    fontSize: 16,
    minHeight: 100,
    textAlignVertical: 'top',
  },
  optionContainer: {
    flexDirection: 'row',
    gap: 10,
    marginVertical: 10,
  },
  optionButton: {
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderWidth: 1,
    borderRadius: 6,
    borderColor: '#ccc',
  },
  optionButtonSelected: {
    backgroundColor: '#28a745',
    borderColor: '#28a745',
  },
  optionText: {
    color: 'black',
  },
  submitButton: {
    backgroundColor: '#0066cc',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  submitButtonText: {
    color: '#fff',
    fontSize: 18,
  },
});







----- KML FORM STATE SELECTION-------------

import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  TextInput,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  Alert,
  UIManager,
  findNodeHandle,
} from 'react-native';
import axios from 'axios';

const KmlForm = ({ route, navigation }) => {
  const { researcherData } = route.params || {};

  const [researcherMobile, setResearcherMobile] = useState('');
  const [researcherName, setResearcherName] = useState('');

  const [selectedState, setSelectedState] = useState('');
  const [selectedDistrict, setSelectedDistrict] = useState('');
  const [selectedVillage, setSelectedVillage] = useState('');
  const [shapeId, setShapeId] = useState('');

  const [statesList, setStatesList] = useState([]);
  const [districtsList, setDistrictsList] = useState([]);
  const [villagesList, setVillagesList] = useState([]);

  const [dropdownStatesVisible, setDropdownStatesVisible] = useState(false);
  const [dropdownDistsVisible, setDropdownDistsVisible] = useState(false);
  const [dropdownVillagesVisible, setDropdownVillagesVisible] = useState(false);

  const [dropdownTop, setDropdownTop] = useState(0);

  // Refs to the TouchableOpacity components for measuring position
  const stateRef = useRef(null);
  const districtRef = useRef(null);
  const villageRef = useRef(null);

  useEffect(() => {
    if (researcherData) {
      setResearcherMobile(researcherData.researcherMobile || '');
      setResearcherName(researcherData.researcherName || '');
    }
    fetchStates();
  }, []);

  const fetchStates = async () => {
    try {
      const res = await axios.get('https://adfirst.in/api/VillageCsv/UniqueStates');
      setStatesList(res.data.data || []);
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Failed to load states.');
    }
  };

  const fetchDistricts = async (state) => {
    try {
      const res = await axios.get(`https://adfirst.in/api/VillageCsv/UniqueDistsByState?state=${state}`);
      setDistrictsList(res.data.data || []);
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Failed to load districts.');
    }
  };

  const fetchVillages = async (dist) => {
    try {
      const res = await axios.get(`https://adfirst.in/api/VillageCsv/UniqueVillagesByDist?dist=${dist}`);
      setVillagesList(res.data.data || []);
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Failed to load villages.');
    }
  };

  const fetchVillageDetails = async (villageName) => {
    try {
      const res = await axios.get(`https://adfirst.in/api/VillageCsv/GetVillageDetails?villageName=${villageName}`);
      const data = res.data.data;
      if (Array.isArray(data) && data.length > 0) {
        setShapeId(data[0].SHAPE_ID || '');
      }
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Failed to fetch village details.');
    }
  };

  const handleStateSelect = (state) => {
    setSelectedState(state);
    setSelectedDistrict('');
    setSelectedVillage('');
    setDistrictsList([]);
    setVillagesList([]);
    setDropdownStatesVisible(false);
    fetchDistricts(state);
  };

  const handleDistrictSelect = (district) => {
    setSelectedDistrict(district);
    setSelectedVillage('');
    setVillagesList([]);
    setDropdownDistsVisible(false);
    fetchVillages(district);
  };

  const handleVillageSelect = (village) => {
    setSelectedVillage(village);
    setDropdownVillagesVisible(false);
    fetchVillageDetails(village);
  };

  const handleSubmit = () => {
    if (!selectedState || !selectedDistrict || !selectedVillage) {
      Alert.alert('Validation Error', 'Please select state, district, and village.');
      return;
    }
    navigation.navigate('Select', {
      selectedState,
      selectedDistrict,
      selectedVillage,
      shapeId,
      researcherMobile,
    });
  };

  // Measure dropdown position
  const measureDropdownTop = (ref) => {
    if (ref.current) {
      UIManager.measure(findNodeHandle(ref.current), (x, y, width, height, pageX, pageY) => {
        setDropdownTop(pageY + height);
      });
    }
  };

  const renderDropdown = (visible, list, onSelect) => {
  if (!visible) return null;
  return (
    <View style={[styles.dropdownContainer, { top: dropdownTop }]}>
      <ScrollView style={styles.dropdownScroll} nestedScrollEnabled>
        {list.map((item, index) => (
          <TouchableOpacity
            key={index}
            style={styles.dropdownItem}
            onPress={() => onSelect(item)}
          >
            <Text style={styles.dropdownItemText}>{item}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
    </View>
  );
};


  return (
    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <ScrollView contentContainerStyle={styles.container} keyboardShouldPersistTaps="handled">
        <Text style={styles.heading}>Welcome </Text>
        <Text style={styles.headingname}>{researcherName} </Text>

        <Text style={styles.label}>Select State</Text>
        <TouchableOpacity
          ref={stateRef}
          style={styles.input}
          onPress={() => {
            setDropdownStatesVisible(!dropdownStatesVisible);
            setDropdownDistsVisible(false);
            setDropdownVillagesVisible(false);
            measureDropdownTop(stateRef);
          }}
        >
          <Text style={{ color: selectedState ? '#000' : 'gray' }}>
            {selectedState || 'Select a state...'}
          </Text>
        </TouchableOpacity>
        {renderDropdown(dropdownStatesVisible, statesList, handleStateSelect)}

        {selectedState ? (
          <>
            <Text style={styles.label}>Select District</Text>
            <TouchableOpacity
              ref={districtRef}
              style={styles.input}
              onPress={() => {
                setDropdownDistsVisible(!dropdownDistsVisible);
                setDropdownStatesVisible(false);
                setDropdownVillagesVisible(false);
                measureDropdownTop(districtRef);
              }}
            >
              <Text style={{ color: selectedDistrict ? '#000' : 'gray' }}>
                {selectedDistrict || 'Select a district...'}
              </Text>
            </TouchableOpacity>
            {renderDropdown(dropdownDistsVisible, districtsList, handleDistrictSelect)}
          </>
        ) : null}

        {selectedDistrict ? (
          <>
            <Text style={styles.label}>Select Village</Text>
            <TouchableOpacity
              ref={villageRef}
              style={styles.input}
              onPress={() => {
                setDropdownVillagesVisible(!dropdownVillagesVisible);
                setDropdownStatesVisible(false);
                setDropdownDistsVisible(false);
                measureDropdownTop(villageRef);
              }}
            >
              <Text style={{ color: selectedVillage ? '#000' : 'gray' }}>
                {selectedVillage || 'Select a village...'}
              </Text>
            </TouchableOpacity>
            {renderDropdown(dropdownVillagesVisible, villagesList, handleVillageSelect)}
          </>
        ) : null}

        <Text style={styles.label}>Researcher Mobile</Text>
        <TextInput
          style={styles.input}
          placeholder="Researcher Mobile"
          placeholderTextColor="gray"
          value={researcherMobile}
          editable={false}
        />

        <TouchableOpacity style={styles.button} onPress={handleSubmit}>
          <Text style={styles.buttonText}>Next</Text>
        </TouchableOpacity>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

export default KmlForm;

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    flexGrow: 1, // Let it expand properly
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#333',
  },
  headingname : {
    fontSize: 32,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 40,
    color: '#333',
  },
  label: {
    fontSize: 16,
    marginBottom: 6,
    color: '#444',
    fontWeight:"bold"
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 12,
    borderRadius: 6,
    marginBottom: 20,
    fontSize: 16,
    color: '#000',
  },
  button: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  dropdownContainer: {
    position: 'absolute',
    left: 20,
    right: 20,
    zIndex: 1000,
  },
  dropdownScroll: {
    maxHeight: 200,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 6,
    backgroundColor: '#fff',
  },
  dropdownItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  dropdownItemText: {
    fontSize: 16,
    color: '#000',
  },
});





//        import React, { useState, useEffect } from 'react';
// import {
//     View,
//     Text,
//     TextInput,
//     TouchableOpacity,
//     StyleSheet,
//     ScrollView,
//     Alert
// } from 'react-native';
// import axios from 'axios';
// import { useForm, Controller, useFieldArray } from 'react-hook-form';
// import { useFormData } from './FormDataContext';

// const PartTwoQues7 = ({ navigation, route }) => {
//     const { name, researcherMobile, formNumber, selectedState, selectedDistrict, selectedVillage, shapeId } = route.params || {};
//     const { formData, updateFormData } = useFormData();

//     const [loading, setLoading] = useState(false);

//     // Initialize context
//     useEffect(() => {
//         if (!formData.PartTwoQues7) {
//             updateFormData("PartTwoQues7", {
//                 mainAnswer: null,
//                 details: [],
//             });
//         }
//     }, []);

//     const { control, handleSubmit, watch, reset } = useForm({
//         defaultValues: formData.PartTwoQues7 || { mainAnswer: null, details: [] },
//         mode: 'onChange',
//     });

//     const { append, fields, remove } = useFieldArray({
//         control,
//         name: 'details',
//     });

//     const mainAnswer = watch('mainAnswer');
//     const details = watch('details');

//     // Sync form values to context
//     useEffect(() => {
//         updateFormData("PartTwoQues7", {
//             mainAnswer,
//             details,
//         });
//     }, [mainAnswer, details]);

//     const isFormValid = () => {
//         if (mainAnswer !== 'yes') return mainAnswer === 'no';
//         return (
//             details.length > 0 &&
//             details.every(
//                 item =>
//                     item.field1?.trim() &&
//                     item.field2?.trim() &&
//                     item.textarea?.trim() &&
//                     /^\d{10}$/.test(item.mobile || '')
//             )
//         );
//     };

//     const onSubmit = async (data) => {
//         setLoading(true);

//         const basePayload = {
//             Question: 'Who are the people that may create problems during land acquisition?',
//             Kml_Name: name,
//             Researcher_Mobile: Number(researcherMobile),
//             Form_No: formNumber,
//             Dist: selectedDistrict,
//             State: selectedState,
//             Village_Name: selectedVillage,
//             Shape_Id: shapeId,
//         };

//         try {
//             if (data.mainAnswer === 'no') {
//                 const payload = {
//                     ...basePayload,
//                     Id: formData.PartTwoQues7?.id || 0,
//                     Answer: 'No',
//                     Name: '',
//                     Background: '',
//                     Reason: '',
//                 };

//                 if (payload.Id && payload.Id !== 0) {
//                     await axios.post(`https://adfirst.in/api/Part2Question7/update/${payload.Id}`, payload);
//                 } else {
//                     const response = await axios.post('https://adfirst.in/api/Part2Question7', payload);
//                     updateFormData('PartTwoQues7', {
//                         ...formData.PartTwoQues7,
//                         id: response.data.id,
//                     });
//                 }

//             } else if (data.mainAnswer === 'yes') {
//                 const updatedDetails = [...(formData.PartTwoQues7.details || [])];

//                 const promises = data.details.map(async (detail, index) => {
//                     const detailPayload = {
//                         ...basePayload,
//                         Id: detail.id || 0,
//                         Answer: 'Yes',
//                         Name: detail.field1,
//                         Background: detail.field2,
//                         Reason: detail.textarea,
//                         Mobile_No: Number(detail.mobile),
//                     };

//                     if (detailPayload.Id && detailPayload.Id !== 0) {
//                         await axios.post(`https://adfirst.in/api/Part2Question7/update/${detailPayload.Id}`, detailPayload);
//                     } else {
//                         const response = await axios.post('https://adfirst.in/api/Part2Question7', detailPayload);
//                         if (updatedDetails[index]) {
//                             updatedDetails[index].id = response.data.id;
//                         } else {
//                             updatedDetails[index] = { id: response.data.id };
//                         }
//                     }
//                 });

//                 await Promise.all(promises);

//                 updateFormData('PartTwoQues7', {
//                     ...formData.PartTwoQues7,
//                     details: updatedDetails,
//                 });
//             }

//             Alert.alert('Data Submitted!');
//             navigation.navigate('PartTwoQues8', {
//                 name,
//                 researcherMobile,
//                 formNumber,
//                 selectedState,
//                 selectedDistrict,
//                 selectedVillage,
//                 shapeId,
//             });
//         } catch (error) {
//             console.error('Error submitting data:', error);
//             Alert.alert('An error occurred while submitting.');
//         } finally {
//             setLoading(false);
//         }
//     };

//     return (
//         <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 40 }}>
//             <Text style={styles.question}>Part2: Question 7</Text>
//             <Text style={styles.question}>Who are the people that may create problems during land acquisition?</Text>
//             <Text style={styles.question}>(कौन से लोग जमीन अधिग्रहण में समस्या खड़ी कर सकते हैं?)</Text>

//             <Controller
//                 control={control}
//                 name="mainAnswer"
//                 rules={{ required: true }}
//                 render={({ field: { onChange, value } }) => (
//                     <View style={styles.toggleContainer}>
//                         {['yes', 'no'].map(option => (
//                             <TouchableOpacity
//                                 key={option}
//                                 style={[
//                                     styles.optionButton,
//                                     value === option && styles.optionButtonSelected,
//                                 ]}
//                                 onPress={() => {
//                                     onChange(option);

//                                     if (option === 'yes' && details.length === 0) {
//                                         append({
//                                             field1: '',
//                                             field2: '',
//                                             textarea: '',
//                                             mobile: '',
//                                         });
//                                     }

//                                     if (option === 'no') {
//                                         for (let i = fields.length - 1; i >= 0; i--) {
//                                             remove(i);
//                                         }
//                                         const cleared = {
//                                             mainAnswer: 'no',
//                                             details: [],
//                                         };
//                                         reset(cleared);
//                                         updateFormData("PartTwoQues7", cleared);
//                                     }
//                                 }}
//                             >
//                                 <Text
//                                     style={[
//                                         styles.optionText,
//                                         value === option && styles.optionTextSelected,
//                                     ]}
//                                 >
//                                     {option === 'yes' ? 'Yes (हाँ)' : 'No one (कोई नहीं)'}
//                                 </Text>
//                             </TouchableOpacity>
//                         ))}
//                     </View>
//                 )}
//             />

//             {mainAnswer === 'yes' &&
//                 fields.map((field, index) => (
//                     <View key={field.id} style={styles.formGroup}>
//                         <Text style={styles.subHeading}>Form {index + 1}</Text>

//                         <Controller
//                             control={control}
//                             name={`details.${index}.field1`}
//                             rules={{ required: true }}
//                             render={({ field: { onChange, value } }) => (
//                                 <TextInput
//                                     style={styles.input}
//                                     placeholder="Name"
//                                     placeholderTextColor="gray"
//                                     value={value}
//                                     onChangeText={onChange}
//                                 />
//                             )}
//                         />

//                         <Controller
//                             control={control}
//                             name={`details.${index}.field2`}
//                             rules={{ required: true }}
//                             render={({ field: { onChange, value } }) => (
//                                 <TextInput
//                                     style={styles.input}
//                                     placeholder="Background"
//                                     placeholderTextColor="gray"
//                                     value={value}
//                                     onChangeText={onChange}
//                                 />
//                             )}
//                         />

//                         <Controller
//                             control={control}
//                             name={`details.${index}.textarea`}
//                             rules={{ required: true }}
//                             render={({ field: { onChange, value } }) => (
//                                 <TextInput
//                                     style={styles.textarea}
//                                     placeholder="Reason"
//                                     placeholderTextColor="gray"
//                                     value={value}
//                                     multiline
//                                     numberOfLines={4}
//                                     onChangeText={onChange}
//                                 />
//                             )}
//                         />

//                         <Controller
//                             control={control}
//                             name={`details.${index}.mobile`}
//                             rules={{
//                                 required: true,
//                                 pattern: /^\d{10}$/,
//                             }}
//                             render={({ field: { onChange, value } }) => (
//                                 <TextInput
//                                     style={styles.input}
//                                     placeholder="Mobile Number"
//                                     placeholderTextColor="gray"
//                                     keyboardType="numeric"
//                                     maxLength={10}
//                                     value={value}
//                                     onChangeText={onChange}
//                                 />
//                             )}
//                         />
//                     </View>
//                 ))}

//             {mainAnswer === 'yes' && (
//                 <TouchableOpacity
//                     style={styles.addButton}
//                     onPress={() =>
//                         append({
//                             field1: '',
//                             field2: '',
//                             textarea: '',
//                             mobile: '',
//                         })
//                     }
//                 >
//                     <Text style={styles.addButtonText}>+ Add More</Text>
//                 </TouchableOpacity>
//             )}

//             <TouchableOpacity
//                 style={[
//                     styles.nextButton,
//                     !isFormValid() && styles.nextButtonDisabled,
//                 ]}
//                 disabled={!isFormValid() || loading}
//                 onPress={handleSubmit(onSubmit)}
//             >
//                 <Text style={styles.nextButtonText}>{loading ? 'Wait...' : 'Next Page'}</Text>
//             </TouchableOpacity>
//         </ScrollView>
//     );
// };

// export default PartTwoQues7;

// const styles = StyleSheet.create({
//     container: {
//         flex: 1,
//         padding: 20,
//         backgroundColor: '#fff',
//     },
//     question: {
//         fontSize: 20,
//         fontWeight: 'bold',
//         textAlign: 'center',
//         marginBottom: 16,
//     },
//     toggleContainer: {
//         flexDirection: 'row',
//         justifyContent: 'center',
//         marginBottom: 20,
//     },
//     optionButton: {
//         padding: 14,
//         borderRadius: 8,
//         borderWidth: 1,
//         borderColor: '#aaa',
//         marginHorizontal: 10,
//         backgroundColor: '#f5f5f5',
//     },
//     optionButtonSelected: {
//         backgroundColor: '#0066cc',
//         borderColor: '#0066cc',
//     },
//     optionText: {
//         color: '#333',
//         fontSize: 16,
//     },
//     optionTextSelected: {
//         color: '#fff',
//         fontWeight: 'bold',
//     },
//     formGroup: {
//         marginBottom: 20,
//         borderWidth: 1,
//         borderColor: '#ddd',
//         padding: 12,
//         borderRadius: 8,
//         backgroundColor: '#fafafa',
//     },
//     subHeading: {
//         fontSize: 16,
//         fontWeight: 'bold',
//         marginBottom: 8,
//     },
//     input: {
//         borderWidth: 1,
//         borderColor: '#aaa',
//         borderRadius: 6,
//         padding: 10,
//         marginBottom: 12,
//         backgroundColor: '#fff',
//     },
//     textarea: {
//         borderWidth: 1,
//         borderColor: '#aaa',
//         borderRadius: 6,
//         padding: 10,
//         height: 100,
//         textAlignVertical: 'top',
//         backgroundColor: '#fff',
//         marginBottom: 12,
//     },
//     addButton: {
//         alignSelf: 'center',
//         marginBottom: 20,
//     },
//     addButtonText: {
//         fontSize: 16,
//         color: '#007bff',
//     },
//     nextButton: {
//         backgroundColor: '#28a745',
//         padding: 14,
//         borderRadius: 8,
//         alignItems: 'center',
//     },
//     nextButtonDisabled: {
//         backgroundColor: '#ccc',
//     },
//     nextButtonText: {
//         color: '#fff',
//         fontSize: 18,
//     },
// });